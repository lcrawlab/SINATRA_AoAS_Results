# plot, using absolute birth times
vert_heat <- colfunc(cuts)[vert_matrix[,1]]
plot3d(sphere1, col = vert_heat, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
rm(list = ls(all = TRUE))
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/mesh_functions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
setwd("~/projects/Research/SINATRA/Simulations")
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/mesh_functions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
difference <- function(x,y){
return( sqrt(sum((x-y)^2)) )
}
### Compare really similar shapes
# Two classes of spheres with random noise on the surface, assign random classes
desired_num_cones <- 30
cap_radius <- 0.005
directions_per_cone <- 5
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 10
curve_length <- 100
ball_radius <- 2.5
subdivision <- 4
data <- matrix(NA,nrow=0,ncol = 1+curve_length*( dim(dir)[1]))
for (i in 1:nsim){
sphere1 = vcgSphere(subdivision = subdivision)
sphere2 = vcgSphere(subdivision = subdivision)
num_v <- (dim(sphere1$vb)[2])
# Add noise to the sphere
sphere2$vb[1:3,] = sphere2$vb[1:3,]  * rnorm(num_v, mean = 1, sd = 0.01)
# draw a parabola on the sphere
# find closest k points to (0,0,1) on the sphere
# scale by distance away from the point
sphere1$vb[1:3,] = sphere1$vb[1:3,] * rnorm(num_v, mean = 1, sd = 0.01)
for (i in 1:num_v){
#computes the 2D euclidean distance on the grid between the points
dist1 = difference(dir[1,], sphere1$vb[1:3,i])
if (dist1 < 0.2){
sphere1$vb[1:3,i] <- sphere1$vb[1:3,i]*((1 + 10*(0.2 - dist1)))^0.5
}
}
sphere_mesh1 = convert_off_file(sphere1)
sphere_mesh2 = convert_off_file(sphere2)
ec_curve_class1 <- matrix(NA,nrow = 1,ncol=0)
ec_curve_class2 <- matrix(NA,nrow = 1,ncol=0)
### compute EC curves for both classes of curves
for (j in 1:dim(dir)[1]){
vertex_function_class_1 <- sphere_mesh1$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
vertex_function_class_2 <- sphere_mesh2$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
curve1 <- compute_standardized_ec_curve(sphere_mesh1, vertex_function_class_1, curve_length-1, first_column_index = FALSE,ball_radius)
curve2 <- compute_standardized_ec_curve(sphere_mesh2, vertex_function_class_2, curve_length-1, first_column_index = FALSE,ball_radius)
# transform the ECT as desired
curve1 <- update_ec_curve(curve1, "DECT")
curve2 <- update_ec_curve(curve2, "DECT")
# omit the length data, for now
ec_curve_class1 <- c(ec_curve_class1,curve1[,2])
ec_curve_class2 <- c(ec_curve_class2,curve2[,2])
}
data <- rbind(data,c(1,ec_curve_class1))
data <- rbind(data,c(0,ec_curve_class2))
}
source("../athena_simulations/SINATRA_Code/ec_computation.R")
for (i in 1:nsim){
sphere1 = vcgSphere(subdivision = subdivision)
sphere2 = vcgSphere(subdivision = subdivision)
num_v <- (dim(sphere1$vb)[2])
# Add noise to the sphere
sphere2$vb[1:3,] = sphere2$vb[1:3,]  * rnorm(num_v, mean = 1, sd = 0.01)
# draw a parabola on the sphere
# find closest k points to (0,0,1) on the sphere
# scale by distance away from the point
sphere1$vb[1:3,] = sphere1$vb[1:3,] * rnorm(num_v, mean = 1, sd = 0.01)
for (i in 1:num_v){
#computes the 2D euclidean distance on the grid between the points
dist1 = difference(dir[1,], sphere1$vb[1:3,i])
if (dist1 < 0.2){
sphere1$vb[1:3,i] <- sphere1$vb[1:3,i]*((1 + 10*(0.2 - dist1)))^0.5
}
}
sphere_mesh1 = convert_off_file(sphere1)
sphere_mesh2 = convert_off_file(sphere2)
ec_curve_class1 <- matrix(NA,nrow = 1,ncol=0)
ec_curve_class2 <- matrix(NA,nrow = 1,ncol=0)
### compute EC curves for both classes of curves
for (j in 1:dim(dir)[1]){
vertex_function_class_1 <- sphere_mesh1$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
vertex_function_class_2 <- sphere_mesh2$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
curve1 <- compute_standardized_ec_curve(sphere_mesh1, vertex_function_class_1, curve_length-1, first_column_index = FALSE,ball_radius)
curve2 <- compute_standardized_ec_curve(sphere_mesh2, vertex_function_class_2, curve_length-1, first_column_index = FALSE,ball_radius)
# transform the ECT as desired
curve1 <- update_ec_curve(curve1, "DECT")
curve2 <- update_ec_curve(curve2, "DECT")
# omit the length data, for now
ec_curve_class1 <- c(ec_curve_class1,curve1[,2])
ec_curve_class2 <- c(ec_curve_class2,curve2[,2])
}
data <- rbind(data,c(1,ec_curve_class1))
data <- rbind(data,c(0,ec_curve_class2))
}
rate_values <- find_rate_variables_with_other_sampling_methods(data,radius = 0, bandwidth = 0.01,
weights = TRUE, type = 'EP')[,2]
plot(rate_values)
### Plot it back onto shape, and make rotating plot
sphere1 <- vcgSphere(subdivision = subdivision)
sphere1$vb[1:3,] = sphere1$vb[1:3,] * rnorm(num_v, mean = 1, sd = 0.01)
neighbors <- c()
for (i in 1:num_v){
#computes the 2D euclidean distance on the grid between the points
dist1 = difference(dir[1,], sphere1$vb[1:3,i])
if (dist1 < 0.2){
sphere1$vb[1:3,i] <- sphere1$vb[1:3,i]*((1 + 10*(0.2 - dist1)))^0.5
neighbors <- c(neighbors,i)
}
}
complex <- convert_off_file(sphere1)
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.01,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.01,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
desired_num_cones <- 30
cap_radius <- 0.005
directions_per_cone <- 5
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 10
curve_length <- 25
ball_radius <- 2.5
subdivision <- 4
data <- matrix(NA,nrow=0,ncol = 1+curve_length*( dim(dir)[1]))
for (i in 1:nsim){
sphere1 = vcgSphere(subdivision = subdivision)
sphere2 = vcgSphere(subdivision = subdivision)
num_v <- (dim(sphere1$vb)[2])
# Add noise to the sphere
sphere2$vb[1:3,] = sphere2$vb[1:3,]  * rnorm(num_v, mean = 1, sd = 0.01)
# draw a parabola on the sphere
# find closest k points to (0,0,1) on the sphere
# scale by distance away from the point
sphere1$vb[1:3,] = sphere1$vb[1:3,] * rnorm(num_v, mean = 1, sd = 0.01)
for (i in 1:num_v){
#computes the 2D euclidean distance on the grid between the points
dist1 = difference(dir[1,], sphere1$vb[1:3,i])
if (dist1 < 0.2){
sphere1$vb[1:3,i] <- sphere1$vb[1:3,i]*((1 + 10*(0.2 - dist1)))^0.5
}
}
sphere_mesh1 = convert_off_file(sphere1)
sphere_mesh2 = convert_off_file(sphere2)
ec_curve_class1 <- matrix(NA,nrow = 1,ncol=0)
ec_curve_class2 <- matrix(NA,nrow = 1,ncol=0)
### compute EC curves for both classes of curves
for (j in 1:dim(dir)[1]){
vertex_function_class_1 <- sphere_mesh1$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
vertex_function_class_2 <- sphere_mesh2$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
curve1 <- compute_standardized_ec_curve(sphere_mesh1, vertex_function_class_1, curve_length-1, first_column_index = FALSE,ball_radius)
curve2 <- compute_standardized_ec_curve(sphere_mesh2, vertex_function_class_2, curve_length-1, first_column_index = FALSE,ball_radius)
# transform the ECT as desired
curve1 <- update_ec_curve(curve1, "DECT")
curve2 <- update_ec_curve(curve2, "DECT")
# omit the length data, for now
ec_curve_class1 <- c(ec_curve_class1,curve1[,2])
ec_curve_class2 <- c(ec_curve_class2,curve2[,2])
}
data <- rbind(data,c(1,ec_curve_class1))
data <- rbind(data,c(0,ec_curve_class2))
}
rate_values <- find_rate_variables_with_other_sampling_methods(data,radius = 0, bandwidth = 0.01,
weights = TRUE, type = 'EP')[,2]
plot(rate_values)
### Plot it back onto shape, and make rotating plot
sphere1 <- vcgSphere(subdivision = subdivision)
sphere1$vb[1:3,] = sphere1$vb[1:3,] * rnorm(num_v, mean = 1, sd = 0.01)
neighbors <- c()
for (i in 1:num_v){
#computes the 2D euclidean distance on the grid between the points
dist1 = difference(dir[1,], sphere1$vb[1:3,i])
if (dist1 < 0.2){
sphere1$vb[1:3,i] <- sphere1$vb[1:3,i]*((1 + 10*(0.2 - dist1)))^0.5
neighbors <- c(neighbors,i)
}
}
complex <- convert_off_file(sphere1)
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.01,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
cuts <- 1000
vert_matrix <- reconstruct_vertices_on_shape(dir, complex, rate_values, curve_length, cuts = cuts,
directions_per_cone, ball_radius, TRUE)
# define heatmap colors
color1='blue'
color2='lightgreen'
color3='orangered'
color3 = 'red'
col_pal=c(color1,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
# plot, using absolute birth times
vert_heat <- colfunc(cuts)[vert_matrix[,1]]
plot3d(sphere1, col = vert_heat, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.03,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.01,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.005,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.005,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.001,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
reconstructed_vs <- compute_selected_vertices_cones(dir, complex, rate_values, curve_length, 0.0005,
directions_per_cone, ball_radius,
TRUE, 0)
print(length(reconstructed_vs))
cols = rep('white', dim(complex$Vertices)[1])
cols[reconstructed_vs ] <- 'green'
plot3d(sphere1, col = cols, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/mesh_functions.R")
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/mesh_functions.R")
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
points(rate_values)
plot()
plot(rate_values[1,])
plot(rate_values)
points(rate_values,red)
points(rate_values,color = 'red')
points(rate_values,col = 'red')
??points
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist(regions,sphere_vertices))
??pdist
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
library(pdist)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist(regions,sphere_vertices))
rm(list = ls(all = TRUE))
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
library(pdist)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist(regions,sphere_vertices))
rm(list = ls(all = TRUE))
library(pdist)
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist::pdist(regions,sphere_vertices))
library(knitr)
library(rgl)
library(FNN)
library(pracma)
library(Matrix)
library(Rcpp)
library(parallel)
library(Rvcg)
library(svd)
library(R.utils)
source("../athena_simulations/SINATRA_Code/ec_computation.R")
source("../athena_simulations/SINATRA_Code/generate_directions.R")
source("../athena_simulations/SINATRA_Code/RATEv2.R")
source("../athena_simulations/SINATRA_Code/shape_reconstruction.R")
source("../athena_simulations/SINATRA_Code/gp_inference.R")
source("../athena_simulations/SINATRA_Code/plotting_functions.R")
sourceCpp("../athena_simulations/SINATRA_Code/BAKRGibbs.cpp")
library(pdist)
library(pdist)
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
### Generate directions ###
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
### Generate Data ###
nsim <- 30
curve_length <- 25
ball_radius <- 1.5
subdivision <- 3
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist(regions,sphere_vertices))
??pdist
??pdist::`pdist-package`
??pdist::pdist
#get distances between regions and vertices
distances <- as.matrix(pdist::pdist(regions,sphere_vertices))
