roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 100)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 50)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 50)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 50)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 50)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 10)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 10)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
rate_values
quantile(rate_values,probs = seq(1,0,length.out = truncated))
x = NULL
x == NULL
FALSE == 0
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
source('~/projects/Research/SINATRA/oscar_simulations/SINATRA_Code/roc_curve_simulation.R')
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
source('~/projects/Research/SINATRA/oscar_simulations/SINATRA_Code/shape_reconstruction.R')
roc <- generate_ROC_with_coned_directions(nsim = 2, desired_num_cones = 2, truncated = 4)
### Set the parameters for the analysis ###
set.seed(4913, kind = "L'Ecuyer-CMRG")
n.simulations <- 1
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 10
shared_points <- 10
num_causal_region <- 1
num_shared_region <- 2
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(3*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 25, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = FALSE, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
stopCluster(cl)
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Num_Cones" = simulation_results$Num_Cones,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
simulation_results
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(3*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 25, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
stopCluster(cl)
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Num_Cones" = simulation_results$Num_Cones,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Num_Cones <- as.factor(rdfmeans$Num_Cones)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
print(ROC_curve_plt)
n.simulations
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(3*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 25, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.05,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
help(commandArgs)
x = c("1","2")
as.numeric(x)
### Set the parameters for the analysis ###
set.seed(4913, kind = "L'Ecuyer-CMRG")
n.simulations <- 1
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 5
shared_points <- 15
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
stopCluster(cl)
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
stopCluster(cl)
simulation_results
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
traceback()
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
source("SINATRA_Code/roc_curve_simulation.R")
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
j=5
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
source("SINATRA_Code/roc_curve_simulation.R")
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
source("SINATRA_Code/simulated_data_generation.R")
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
traceback()
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
source("SINATRA_Code/roc_curve_simulation.R")
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
source("SINATRA_Code/roc_curve_simulation.R")
generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0)
n.simulations <- 1
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 5
shared_points <- 15
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 5, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
stopCluster(cl)
n.simulations <- 1
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 2, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
stopCluster(cl)
simulation_results
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Class" = simulation_results$Class,
"Num_Directions" = simulation_results$Num_Directions,
"Index" = simulation_results$Index), mean)
rdfmeans$Num_Directions <- as.factor(rdfmeans$Num_Directions)
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Num_Cones" = simulation_results$Num_Cones,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Num_Cones <- as.factor(rdfmeans$Num_Cones)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
print(ROC_curve_plt)
n.simulations <- 3
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 50, curve_length = 30, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 1.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch( generate_ROC_with_coned_directions(nsim = 50, curve_length = 30, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 1.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'sphere', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = num_causal_region, num_shared_region = num_shared_region),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "Num_Cones","X6" = "Trial"))
}
stopCluster(cl)
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Num_Cones" = simulation_results$Num_Cones,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Num_Cones <- as.factor(rdfmeans$Num_Cones)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
print(ROC_curve_plt)
### Set the parameters for the analysis ###
set.seed(4913, kind = "L'Ecuyer-CMRG")
n.simulations <- 1
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 5
shared_points <- 15
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 5, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
stopCluster(cl)
simulation_results
View(simulation_results)
######################################################################################
######################################################################################
######################################################################################
### Aggregate results ###
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Class" = simulation_results$Class,
"Num_Directions" = simulation_results$Num_Directions,
"Index" = simulation_results$Index), mean)
rdfmeans$Num_Directions <- as.factor(rdfmeans$Num_Directions)
### Plot results ###
# plot the first class for simplicity
class_one_ROC <- rdfmeans[rdfmeans$Class == 1,]
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Directions)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
print(ROC_curve_plt)
n.simulations <- 3
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 15
shared_points <- 5
### Setup DoParallel ###
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
### Setup DoParallel ###
no_cores <- detectCores() - 2
no_cores
### Set the parameters for the analysis ###
set.seed(4913, kind = "L'Ecuyer-CMRG")
n.simulations <- 3
reconstruction_type <- "vertex" #set how we assess each reconstruction
causal_points <- 15
shared_points <- 5
### Setup DoParallel ###
no_cores <- detectCores() - 3
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
### Run the analysis in Parallel ###
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind', .noexport = c('GaussKernel')) %:%
foreach(j=c(1,5,10,15,20), .combine = 'rbind', .noexport = c('GaussKernel')) %dopar% {
set.seed(5*i+j)
res <- tryCatch(  generate_ROC_with_coned_directions(nsim = 50, curve_length = 50, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = causal_points,shared_points = shared_points, desired_num_cones = j, eta = 0.1,
truncated = -1, two_curves = TRUE, ball = TRUE, ball_radius = 2.5, type = 'vertex',
min_points = 3,directions_per_cone = 5, cap_radius = 0.15, radius = 1,ec_type = 'ECT',
mode = 'grid', fpr = 0.05, start = 1, cusps = 50,
subdivision = 3,num_causal_region = 0, num_shared_region = 0),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index",
"X5" = "Num_Directions","X6" = "Trial"))
}
